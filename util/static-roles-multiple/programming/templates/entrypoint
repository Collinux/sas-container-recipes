#! /bin/bash

# Exit out if any process returns a non zero return code
set -e

# Enable debugging if SAS_DEBUG is set
[[ -z ${SAS_DEBUG+x} ]] && export SAS_DEBUG=0
if [ ${SAS_DEBUG} -gt 0 ]; then
    set -x
fi

# if given a command, run that
if [[ -n "$1" ]]; then
  exec "$@"
fi

###############################################################################
# Variables
###############################################################################

[[ -z ${SASROOT+x} ]]           && export SASROOT=/opt/sas
[[ -z ${SASDEPLOYID+x} ]]       && export SASDEPLOYID=viya
[[ -z ${SASINSTANCE+x} ]]       && export SASINSTANCE=default
[[ -z ${SASHOME+x} ]]           && export SASHOME=${SASROOT}/${SASDEPLOYID}/home
[[ -z ${SASPREHOME+x} ]]        && export SASPREHOME=${SASROOT}/spre/home
[[ -z ${SASCONFIG+x} ]]         && export SASCONFIG=${SASROOT}/${SASDEPLOYID}/config
[[ -z ${SAS_CURRENT_HOST+x} ]]  && export SAS_CURRENT_HOST=$(hostname -f)

# Set of functions for supporting docker containers
source ${SASHOME}/lib/envesntl/docker-functions

###############################################################################
# Configuration by convention
###############################################################################

[[ -z ${SASINSIDE+x} ]]         && export SASINSIDE="/sasinside"
[[ -z ${SASLICENSEDIR+x} ]]     && export SASLICENSEDIR="${SASPREHOME}/SASFoundation"
[[ -z ${SASLICENSEFILE+x} ]]    && export SASLICENSEFILE="sas_license.txt"

if [ -d "${SASINSIDE}" ]; then
    # If the license dir is the default, then change it.
    # Don't change it if the user set the variable.
    if [ "${SASLICENSEDIR}" = "${SASROOT}/spre/home" ]; then
        echo_line "Set the license directory to ${SASINSIDE}"
        export SASLICENSEDIR="${SASINSIDE}"
    fi

    if [ -e "${SASINSIDE}/host_auth_stop.sh" ]; then
        cp -v ${SASINSIDE}/host_auth_stop.sh /tmp/host_auth_stop.sh
    fi

    if [ -e "${SASINSIDE}/host_auth.sh" ]; then
        cp -v ${SASINSIDE}/host_auth.sh /tmp/host_auth.sh
    fi

    if [ -e "${SASINSIDE}/pre_deploy.sh" ]; then
        cp -v ${SASINSIDE}/pre_deploy.sh /tmp/pre_deploy.sh
    fi

    if [ -e "${SASINSIDE}/pre_deploy.sh" ]; then
        cp -v ${SASINSIDE}/post_deploy.sh /tmp/post_deploy.sh
    fi
fi

###############################################################################
# Shutdown
###############################################################################

trap docker_shutdown_sas_services SIGTERM
trap docker_shutdown_sas_services SIGINT

###############################################################################
# Host Auth
###############################################################################

if [[ ! -z ${HOST_AUTH+x} ]]; then
    echo_line "Creating host authentication script"
    echo "${HOST_AUTH}" > /tmp/host_auth.sh
    chmod -v a+x /tmp/host_auth.sh
fi

if [[ ! -z ${HOST_AUTH_STOP+x} ]]; then
    echo_line "Creating host authentication stop script"
    echo "${HOST_AUTH_STOP}" > /tmp/host_auth_stop.sh
    chmod -v a+x /tmp/host_auth_stop.sh
fi

if [ -e "/tmp/host_auth.sh" ]; then
    echo_line "Running host authentication script from /tmp"
    /tmp/host_auth.sh
fi

###############################################################################
# Pre Deploy
###############################################################################

if [ ! -z "${PRE_DEPLOY_SCRIPT}" ]; then
    echo_line "Creating pre deploy script"
    echo "${PRE_DEPLOY_SCRIPT}" > /tmp/pre_deploy.sh
    chmod -v a+x /tmp/pre_deploy.sh
fi

n_pre_deploy_count=$(find /tmp -type f -name "*pre_deploy.sh" | wc -c)
if (( ${n_pre_deploy_count} > 0 )); then
    for str_pre_script in $(ls -1 /tmp/*pre_deploy.sh); do
        echo "Running pre deploy script \"${str_pre_script}\""
        ${str_pre_script}
    done
fi

###############################################################################
# Configure
###############################################################################

[[ ! -z ${SETINIT_TEXT+x} ]]      && echo "${SETINIT_TEXT}" > ${SASLICENSEDIR}/${SASLICENSEFILE}
[[ ! -z ${SETINIT_TEXT_ENC+x} ]]  && echo "${SETINIT_TEXT_ENC}" | base64 --decode --ignore-garbage > ${SASLICENSEDIR}/${SASLICENSEFILE}
[[ -z ${CAS_CONTROLLER_PORT+x} ]] && export CAS_CONTROLLER_PORT=5570

${SASPREHOME}/SASFoundation/utilities/bin/apply_license ${SASLICENSEDIR}/${SASLICENSEFILE}
${SASPREHOME}/SASFoundation/utilities/bin/post_install build_nickname
${SASPREHOME}/SASFoundation/utilities/bin/post_install build_add_cmacros

[[ ! -z ${CAS_CONTROLLER_HOST+x} ]] && sed -i "s|options cashost=.*$|options cashost=\"${CAS_CONTROLLER_HOST}\" casport=${CAS_CONTROLLER_PORT};|" ${SASCONFIG}/etc/workspaceserver/default/autoexec_deployment.sas
[[ ! -z ${CAS_CONTROLLER_HOST+x} ]] && sed -i "s|options cashost=.*$|options cashost=\"${CAS_CONTROLLER_HOST}\" casport=${CAS_CONTROLLER_PORT};|" ${SASCONFIG}/etc/batchserver/default/autoexec_deployment.sas

#
# Take a collection of configurations and cat them into the usermod files.
#

# Process anything that might have come from a Docker build first
if [ -d ${SASCONFIG}/etc/batchserver/${SASINSTANCE} ]; then
    n_autoexec_count=$(find /tmp -type f -name "*_autoexec.sas" | wc -c)
    if (( ${n_autoexec_count} > 0 )); then
        for str_autoexec in $(ls -1 /tmp/*_autoexec.sas); do
            echo "Dumping contents of \"${str_autoexec}\" into ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/autoexec_usermods.sas"
            echo "" >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/autoexec_usermods.sas
            cat ${str_autoexec} >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/autoexec_usermods.sas
            echo "" >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/autoexec_usermods.sas
        done
    fi

    n_sasv9_count=$(find /tmp -type f -name "*_sasv9.cfg" | wc -c)
    if (( ${n_sasv9_count} > 0 )); then
        for str_sasv9 in $(ls -1 /tmp/*_sasv9.cfg); do
            echo "Dumping contents of \"${str_sasv9}\" into ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/sasv9_usermods.cfg"
            echo "" >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/sasv9_usermods.cfg
            cat ${str_sasv9} >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/sasv9_usermods.cfg
            echo "" >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/sasv9_usermods.cfg
        done
    fi

    n_sasserver_count=$(find /tmp -type f -name "*_sasserver.sh" | wc -c)
    if (( ${n_sasserver_count} > 0 )); then
        for str_sasserver in $(ls -1 /tmp/*_sasserver.sh); do
            echo "Dumping contents of \"${str_sasserver}\" into ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/batchserver_usermods.sh"
            echo "" >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/batchserver_usermods.sh
            cat ${str_sasserver} >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/batchserver_usermods.sh
            echo "" >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/batchserver_usermods.sh
        done
    fi
fi

if [ -d ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE} ]; then
    n_autoexec_count=$(find /tmp -type f -name "*_autoexec.sas" | wc -c)
    if (( ${n_autoexec_count} > 0 )); then
        for str_autoexec in $(ls -1 /tmp/*_autoexec.sas); do
            echo "Dumping contents of \"${str_autoexec}\" into ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/autoexec_usermods.sas"
            echo "" >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/autoexec_usermods.sas
            cat ${str_autoexec} >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/autoexec_usermods.sas
            echo "" >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/autoexec_usermods.sas
        done
    fi

    n_sasv9_count=$(find /tmp -type f -name "*_sasv9.cfg" | wc -c)
    if (( ${n_sasv9_count} > 0 )); then
        for str_sasv9 in $(ls -1 /tmp/*_sasv9.cfg); do
            echo "Dumping contents of \"${str_sasv9}\" into ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/sasv9_usermods.cfg"
            echo "" >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/sasv9_usermods.cfg
            cat ${str_sasv9} >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/sasv9_usermods.cfg
            echo "" >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/sasv9_usermods.cfg
        done
    fi

    n_sasserver_count=$(find /tmp -type f -name "*_sasserver.sh" | wc -c)
    if (( ${n_sasserver_count} > 0 )); then
        for str_sasserver in $(ls -1 /tmp/*_sasserver.sh); do
            echo "Dumping contents of \"${str_sasserver}\" into ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/workspaceserver_usermods.sh"
            echo "" >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/workspaceserver_usermods.sh
            cat ${str_sasserver} >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/workspaceserver_usermods.sh
            echo "" >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/workspaceserver_usermods.sh
        done
    fi
fi

if [ -d ${SASCONFIG}/etc/connectserver/${SASINSTANCE} ]; then
    n_autoexec_count=$(find /tmp -type f -name "*_autoexec.sas" | wc -c)
    if (( ${n_autoexec_count} > 0 )); then
        for str_autoexec in $(ls -1 /tmp/*_autoexec.sas); do
            echo "Dumping contents of \"${str_autoexec}\" into ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/autoexec_usermods.sas"
            echo "" >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/autoexec_usermods.sas
            cat ${str_autoexec} >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/autoexec_usermods.sas
            echo "" >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/autoexec_usermods.sas
        done
    fi

    n_sasv9_count=$(find /tmp -type f -name "*_sasv9.cfg" | wc -c)
    if (( ${n_sasv9_count} > 0 )); then
        for str_sasv9 in $(ls -1 /tmp/*_sasv9.cfg); do
            echo "Dumping contents of \"${str_sasv9}\" into ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/sasv9_usermods.cfg"
            echo "" >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/sasv9_usermods.cfg
            cat ${str_sasv9} >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/sasv9_usermods.cfg
            echo "" >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/sasv9_usermods.cfg
        done
    fi

    n_sasserver_count=$(find /tmp -type f -name "*_sasserver.sh" | wc -c)
    if (( ${n_sasserver_count} > 0 )); then
        for str_sasserver in $(ls -1 /tmp/*_sasserver.sh); do
            echo "Dumping contents of \"${str_sasserver}\" into ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/connectserver_usermods.sh"
            echo "" >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/connectserver_usermods.sh
            cat ${str_sasserver} >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/connectserver_usermods.sh
            echo "" >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/connectserver_usermods.sh
        done
    fi
fi

if [ -d ${SASCONFIG}/etc/sasstudio/${SASINSTANCE} ]; then
    n_sasstudio_count=$(find /tmp -type f -name "*_sasstudio.properties" | wc -c)
    if (( ${n_sasstudio_count} > 0 )); then
        for str_sasstudio in $(ls -1 /tmp/*_sasstudio.properties); do
            echo "Dumping contents of \"${str_sasstudio}\" into ${SASCONFIG}/etc/sasstudio/${SASINSTANCE}/init_usermods.properties"
            echo "" >> ${SASCONFIG}/etc/sasstudio/${SASINSTANCE}/init_usermods.properties
            cat ${str_sasstudio} >> ${SASCONFIG}/etc/sasstudio/${SASINSTANCE}/init_usermods.properties
            echo "" >> ${SASCONFIG}/etc/sasstudio/${SASINSTANCE}/init_usermods.properties
        done
    fi
fi

if [ -d "${SASINSIDE}" ]; then
    if [ -d ${SASCONFIG}/etc/batchserver/${SASINSTANCE} ]; then
        if [ -f ${SASINSIDE}/autoexec_usermods.sas ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/autoexec_usermods.sas\" into ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/autoexec_usermods.sas"
            cat ${SASINSIDE}/autoexec_usermods.sas >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/autoexec_usermods.sas
        fi

        if [ -f ${SASINSIDE}/sasv9_usermods.cfg ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/sasv9_usermods.cfg\" into ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/sasv9_usermods.cfg"
            cat ${SASINSIDE}/sasv9_usermods.cfg >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/sasv9_usermods.cfg
        fi

        if [ -f ${SASINSIDE}/batchserver_usermods.sh ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/batchserver_usermods.sh\" into ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/batchserver_usermods.sh"
            cat ${SASINSIDE}/batchserver_usermods.sh >> ${SASCONFIG}/etc/batchserver/${SASINSTANCE}/batchserver_usermods.sh
        fi
    fi

    if [ -d ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE} ]; then
        if [ -f ${SASINSIDE}/autoexec_usermods.sas ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/autoexec_usermods.sas\" into ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/autoexec_usermods.sas"
            cat ${SASINSIDE}/autoexec_usermods.sas >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/autoexec_usermods.sas
        fi

        if [ -f ${SASINSIDE}/sasv9_usermods.cfg ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/sasv9_usermods.cfg\" into ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/sasv9_usermods.cfg"
            cat ${SASINSIDE}/sasv9_usermods.cfg >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/sasv9_usermods.cfg
        fi

        if [ -f ${SASINSIDE}/workspaceserver_usermods.sh ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/workspaceserver_usermods.sh\" into ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/workspaceserver_usermods.sh"
            cat ${SASINSIDE}/workspaceserver_usermods.sh >> ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/workspaceserver_usermods.sh
        fi
    fi

    if [ -d ${SASCONFIG}/etc/connectserver/${SASINSTANCE} ]; then
        if [ -f ${SASINSIDE}/autoexec_usermods.sas ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/autoexec_usermods.sas\" into ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/autoexec_usermods.sas"
            cat ${SASINSIDE}/autoexec_usermods.sas >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/autoexec_usermods.sas
        fi

        if [ -f ${SASINSIDE}/sasv9_usermods.cfg ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/sasv9_usermods.cfg\" into ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/sasv9_usermods.cfg"
            cat ${SASINSIDE}/sasv9_usermods.cfg >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/sasv9_usermods.cfg
        fi

        if [ -f ${SASINSIDE}/connectserver_usermods.sh ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/connectserver_usermods.sh\" into ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/connectserver_usermods.sh"
            cat ${SASINSIDE}/connectserver_usermods.sh >> ${SASCONFIG}/etc/connectserver/${SASINSTANCE}/connectserver_usermods.sh
        fi
    fi

    if [ -d ${SASCONFIG}/etc/sasstudio/${SASINSTANCE} ]; then
        if [ -f ${SASINSIDE}/sasstudio_usermods.properties ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/sasstudio_usermods.properties\" into ${SASCONFIG}/etc/sasstudio/${SASCASINSTANCE}/init_usermods.properties"
            cat ${SASINSIDE}/sasstudio_usermods.properties >> ${SASCONFIG}/etc/sasstudio/${SASINSTANCE}/init_usermods.properties
        fi
    fi
fi

###############################################################################
# Post Deploy
###############################################################################

if [ ! -z "${POST_DEPLOY_SCRIPT}" ]; then
    echo_line "Creating post deploy script"
    echo "${POST_DEPLOY_SCRIPT}" > /tmp/post_deploy.sh
    chmod -v a+x /tmp/post_deploy.sh
fi

n_post_deploy_count=$(find /tmp -type f -name "*post_deploy.sh" | wc -c)
if (( ${n_post_deploy_count} > 0 )); then
    for str_post_script in $(ls -1 /tmp/*post_deploy.sh); do
        echo "Running post deploy script \"${str_post_script}\""
        ${str_post_script}
    done
fi

###############################################################################
# Configure logging
###############################################################################

## # Setup object spawner to log to stdout
## sed -i 's|>\$spawner_logfile ||' ${SASCONFIG}/etc/spawner/${SASINSTANCE}/spawner.sh
##
## # Setup workspace server to log to stdout
## cp ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/logconfig.stdout.xml ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/logconfig.xml
## sed -i 's|Debug|Info|' ${SASCONFIG}/etc/workspaceserver/${SASINSTANCE}/logconfig.xml
##
## # Configure SAS Studio to log to stdout
## sed -i 's|^\$command.*$|\$command 2>\&1 \&|' ${SASHOME}/SASStudio/bin/appserver.sh
## cat > ${SASCONFIG}/etc/sasstudio/${SASINSTANCE}/SASStudio-log4j.xml << SASSTUDIO
## <?xml version="1.0" encoding="UTF-8"?>
## <Configuration>
##         <Appenders>
##                 <Console name="Console" target="SYSTEM_OUT">
##                         <PatternLayout pattern="%d [%t] %-5p %c (%F:%L) - %m%n"/>
##                 </Console>
##         </Appenders>
##
##         <Loggers>
##                 <Logger name="com.sas" level="ERROR">
##                         <AppenderRef ref="SYSTEM_OUT" />
##                 </Logger>
##                 <Root level="ERROR">
##                         <AppenderRef ref="SYSTEM_OUT" />
##                 </Root>
##         </Loggers>
## </Configuration>
## SASSTUDIO

###############################################################################
# Run SAS services
###############################################################################

docker_run_sas_services

###############################################################################
# Keep the container alive until it is killed
###############################################################################

docker_check_sas_services
