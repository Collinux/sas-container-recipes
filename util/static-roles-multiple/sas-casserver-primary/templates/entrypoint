#! /bin/bash -e

# Enable debugging if SAS_DEBUG is set
[[ -z ${SAS_DEBUG+x} ]] && export SAS_DEBUG=0
if [ ${SAS_DEBUG} -gt 0 ]; then
    set -x
fi

# if given a command, run that
if [[ -n "$1" ]]; then
  exec "$@"
fi

###############################################################################
# Variables
###############################################################################

[[ -z ${DEPLOYMENT_NAME+x} ]]   && export DEPLOYMENT_NAME="viya"
[[ -z ${SASSERVICENAME+x} ]]    && export SASSERVICENAME="sas-cas"
[[ -z ${SASSERVICECONTEXT+x} ]] && export SASSERVICECONTEXT=${SASSERVICENAME#sas-}
[[ -z ${SASROOT+x} ]]           && export SASROOT=/opt/sas
[[ -z ${SASDEPLOYID+x} ]]       && export SASDEPLOYID=viya
[[ -z ${SASINSTANCE+x} ]]       && export SASINSTANCE=default
[[ -z ${SASHOME+x} ]]           && export SASHOME=${SASROOT}/${SASDEPLOYID}/home
[[ -z ${SASCONFIG+x} ]]         && export SASCONFIG=${SASROOT}/${SASDEPLOYID}/config
[[ -z ${SASTOKENDIR+x} ]]       && export SASTOKENDIR=${SASCONFIG}/etc/SASSecurityCertificateFramework/tokens/consul/default
[[ -z ${SASCASINSTANCE+x} ]]    && export SASCASINSTANCE="${SASINSTANCE}"
[[ -z ${SAS_CURRENT_HOST+x} ]]  && export SAS_CURRENT_HOST=$(hostname -f)

_deployid=${SASDEPLOYID}
export SAS_CAS_CONFIG="${SASROOT}/${_deployid}/config"

# The following are used in sas-start-functions
servicename=${SASSERVICENAME}
servicecontext=${SASSERVICECONTEXT}

# Set of functions for supporting docker containers
source ${SASHOME}/lib/envesntl/docker-functions

###############################################################################
# Shutdown
###############################################################################

trap docker_shutdown_sas_services SIGTERM
trap docker_shutdown_sas_services SIGINT

###############################################################################
# Pre Deploy
###############################################################################

if [ ! -z "${PRE_DEPLOY_SCRIPT}" ]; then
    echo_line "Creating pre deploy script"
    echo "${PRE_DEPLOY_SCRIPT}" > /tmp/pre_deploy.sh
    chmod -v a+x /tmp/pre_deploy.sh
fi

n_pre_deploy_count=$(find /tmp -type f -name "*pre_deploy.sh" | wc -c)
if (( ${n_pre_deploy_count} > 0 )); then
    for str_pre_script in $(ls -1 /tmp/*pre_deploy.sh); do
        echo "Running pre deploy script \"${str_pre_script}\""
        ${str_pre_script}
    done
fi

###############################################################################
# Configuration by convention
###############################################################################

#
# Take a collection of configurations and cat them into the usermod files.
#

# Process anything that might have come from a Docker build first
if [ -d ${SASCONFIG}/etc/cas/${SASCASINSTANCE} ]; then
    n_config_count=$(find /tmp -type f -name "*_casconfig.lua" | wc -c)
    if (( ${n_config_count} > 0 )); then
        for str_casconfig in $(ls -1 /tmp/*_casconfig.lua); do
            echo "Dumping contents of \"${str_casconfig}\" into ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_usermods.lua"
            echo "" >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_usermods.lua
            cat ${str_casconfig} >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_usermods.lua
            echo "" >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_usermods.lua
        done
    fi

    n_settings_count=$(find /tmp -type f -name "*_cas.settings" | wc -c)
    if (( ${n_settings_count} > 0 )); then
        for str_cassettings in $(ls -1 /tmp/*_cas.settings); do
            echo "Dumping contents of \"${str_cassettings}\" into ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/cas_usermods.settings"
            echo "" >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/cas_usermods.settings
            cat ${str_cassettings} >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/cas_usermods.settings
            echo "" >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/cas_usermods.settings
        done
    fi

    n_startup_count=$(find /tmp -type f -name "*_casstartup.lua" | wc -c)
    if (( ${n_settings_count} > 0 )); then
        for str_casstartup in $(ls -1 /tmp/*_casstartup.lua); do
            echo "Dumping contents of \"${str_casstartup}\" into ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casstartup_usermods.lua"
            echo "" >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casstartup_usermods.lua
            cat ${str_casstartup} >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casstartup_usermods.lua
            echo "" >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casstartup_usermods.lua
        done
    fi
fi

# Process any user provided content second so that it can override any baked in options.
[[ -z ${SASINSIDE+x} ]]         && export SASINSIDE="/sasinside"
[[ -z ${SASLICENSEDIR+x} ]]     && export SASLICENSEDIR="${SASCONFIG}"
[[ -z ${SASLICENSEFILE+x} ]]    && export SASLICENSEFILE="sas_license.txt"

if [ -d "${SASINSIDE}" ]; then
    # If the license dir is the default, then change it.
    # Don't change it if the user set the variable.
    if [ "${SASLICENSEDIR}" = "${SASCONFIG}" ]; then
        echo_line "Set the license directory to ${SASINSIDE}"
        export SASLICENSEDIR="${SASINSIDE}"
    fi
    if [ -d ${SASCONFIG}/etc/cas/${SASCASINSTANCE} ]; then
        if [ -f ${SASINSIDE}/casconfig_usermods.lua ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/casconfig_usermods.lua\" into ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_usermods.lua"
            cat ${SASINSIDE}/casconfig_usermods.lua >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_usermods.lua
        fi

        if [ -f ${SASINSIDE}/cas_usermods.settings ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/cas_usermods.settings\" into ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/cas_usermods.settings"
            cat ${SASINSIDE}/cas_usermods.settings >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/cas_usermods.settings
        fi

        if [ -f ${SASINSIDE}/casstartup_usermods.lua ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/casstartup_usermods.lua\" into ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casstartup_usermods.lua"
            cat ${SASINSIDE}/casstartup_usermods.lua >> ${SASCONFIG}/etc/cas/${SASCASINSTANCE}/casstartup_usermods.lua
        fi

        if [ -f ${SASINSIDE}/sas-cas-usermods ]; then
            echo "Dumping user overrides in \"${SASINSIDE}/sas-cas-usermods\" into ${SASCONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-usermods"
            cat ${SASINSIDE}/sas-cas-usermods >> ${SASCONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-usermods
        fi
    fi
fi

###############################################################################
# Configure CAS
###############################################################################

#
# Clean up some other CAS configuration for a Docker image
#

[[ -z ${CASKEY+x} ]]       && CASKEY="REPLACE ME with unique text. This is used to allow CAS workers to talk to the CAS controller"
[[ -z ${SERVICE_NAME+x} ]] && export SERVICE_NAME="cascontroller"
is_controller=true

if [ "${SERVICE_NAME}" = "cascontroller" ]; then
    export CASCONTROLLERHOST="${SAS_CURRENT_HOST}"
    export CASWORKERHOSTS=""
    # Update the controller host before updating Consul
    sed -i "s|REPLACE_KEY_WITH_RUN_TIME_VALUE|${CASKEY}|" ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas.yml
    sed -i "s|SASCONTROLLERHOST: .*|SASCONTROLLERHOST: ${CASCONTROLLERHOST}|" ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas.yml
elif [ "${SERVICE_NAME}" = "cassecondary" ]; then
    export CASBACKUPHOST="${SAS_CURRENT_HOST}"
    export CASCFG_MODE=mpp
elif [ "${SERVICE_NAME}" = "casworker" ]; then
    is_controller=false
    export CASWORKERHOSTS="${SAS_CURRENT_HOST}"
    export CASCFG_MODE=mpp
else
    echo "[ERROR] - Unknown service type passed in."
    exit 11
fi

if [[ ! -f ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker ]]; then
    touch ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
    chown --verbose sas:sas ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
    chmod --verbose 0644 ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
fi

if [ "${CASCFG_MODE}" = "mpp" ]; then
    if [[ -z ${CASKEY+x} ]]; then
        echo "[INFO]  - Running in MPP mode but CASKEY was *not* provided as an environment variable."
        echo "[INFO]  - Checking if CASKEY is defined in ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-deployment"
        set +e
        grep "CASKEY=" ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-deployment
        grep_rc=$?
        set -e
        if (( ${grep_rc} != 0 )); then
            echo "[ERROR] - Running in MPP mode but CASKEY cannot be found."
            exit 11
        else
            echo "[INFO]  - CASKEY found in ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-deployment"
        fi
    else
        echo "[INFO]  - Running in MPP mode and CASKEY *was* provided as an environment variable."
        echo "CASKEY=\"${CASKEY}\"" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
    fi

    [[ -z ${CASCFG_GCPORT+x} ]]         && export CASCFG_GCPORT=5571
    [[ -z ${CASCFG_INITIALBACKUPS+x} ]] && export CASCFG_INITIALBACKUPS=0
    [[ -z ${CASCFG_INITIALWORKERS+x} ]] && export CASCFG_INITIALWORKERS=1
    [[ -z ${CASCFG_KEYFILE+x} ]]        && export CASCFG_KEYFILE=${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_key
    [[ -z ${CASCFG_ELASTIC+x} ]]        && export CASCFG_ELASTIC=true
    [[ -z ${CASCFG_COLOCATION+x} ]]     && export CASCFG_COLOCATION=none
fi

# Forcing this so it will get sourced into supporting scripts. Was having issues 
# when registering the services. They would register as localhost instead of the
# defined host name.
echo "SAS_CURRENT_HOST=${SAS_CURRENT_HOST}" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker

# Update the ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
# to have updated settings.

if [[ -n ${CASCONTROLLERHOST} ]]; then
    echo "SASCONTROLLERHOST=${CASCONTROLLERHOST}" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
fi
if [[ -n ${CASWORKERHOSTS} ]]; then
    echo "SASWORKERHOSTS=${CASWORKERHOSTS}" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
fi
if [[ -n ${CASENV_CASDATADIR} ]]; then
    echo "SASCASDATADIR=${CASENV_CASDATADIR}" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
fi
# DOCKER-404: Make sure the USERLOC starts from the CASDATADIR value
if [[ -n ${CASUSERLOCDIR} ]]; then
    echo "SASUSERLOCDIR=${CASUSERLOCDIR}" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
else
    echo "SASUSERLOCDIR=\${SASCASDATADIR}/casuserlibraries/%USER" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
fi
if [[ -n ${CASENV_CASPERMSTORE} ]]; then
    echo "SASPERMSTORE=${CASENV_CASPERMSTORE}" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker
fi

# Define JAVA_HOME and update the LD_LIBRARY_PATH
source ${SASCONFIG}/etc/sysconfig/sas-javaesntl/sas-java

[[ -z ${CASSET_JAVA_HOME+x} ]] && export CASSET_JAVA_HOME=$JAVA_HOME
[[ -z ${CASLLP_JAVA+x} ]]      && export CASLLP_JAVA=\$LD_LIBRARY_PATH:\$JAVA_HOME/lib/amd64/server

# If the license is being passed in via an environment variable then echo it into a file.
[[ ! -z ${SETINIT_TEXT+x} ]]     && echo "${SETINIT_TEXT}" > ${SASLICENSEDIR}/${SASLICENSEFILE} && unset SETINIT_TEXT
[[ ! -z ${SETINIT_TEXT_ENC+x} ]] && echo "${SETINIT_TEXT_ENC}" | base64 --decode --ignore-garbage > ${SASLICENSEDIR}/${SASLICENSEFILE} && unset SETINIT_TEXT_ENC

# Tell CAS where the license lives if the user has not already set it.
[[ -z ${CASENV_CAS_LICENSE+x} ]] && export CASENV_CAS_LICENSE=${SASLICENSEDIR}/${SASLICENSEFILE}

# Set CAS port and proto
[[ -z ${CASENV_CAS_VIRTUAL_PORT+x} ]] && export CASENV_CAS_VIRTUAL_PORT=80
[[ -z ${CASENV_CAS_VIRTUAL_PROTO+x} ]] && export CASENV_CAS_VIRTUAL_PROTO=http

#
# Take anything that was passed in as an environment variable and update the
# configuration files.
#

echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_docker.lua ""
echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_docker.lua "-- Inserting section capturing variables set on container creation."

set +e
# Process configuration option settings
while IFS='=' read -r name value ; do
    key=$(cut -d'_' -f2- <<<"${name}")
    if [[ ${name} == 'CASCFG_'* ]]; then
        if [[ ${!name} =~ ^[0-9]+$ ]]; then
            echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_docker.lua "cas.$(echo $key | awk '{print tolower($0)}') = ${!name}"
        else
            echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_docker.lua "cas.$(echo $key | awk '{print tolower($0)}') = '${!name}'"
        fi
    fi
done < <(env | grep "CASCFG")

# Process environment option settings
while IFS='=' read -r name value ; do
    key=$(cut -d'_' -f2- <<<"${name}")
    if [[ ${name} == 'CASENV_'* ]]; then
        if [[ ${!name} =~ ^[0-9]+$ ]]; then
            echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_docker.lua "env.$(echo $key | awk '{print toupper($0)}') = ${!name}"
        else
            echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/casconfig_docker.lua "env.$(echo $key | awk '{print toupper($0)}') = '${!name}'"
        fi
    fi
done < <(env | grep "CASENV")

echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings ""
echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings "# Inserting section capturing variables set on container creation."

# Process settings option settings
while IFS='=' read -r name value ; do
    key=$(cut -d'_' -f2- <<<"${name}")
    if [[ ${name} == 'CASSET_'* ]]; then
        if [[ ${!name} =~ ^[0-9]+$ ]]; then
            echo ${key} | grep -q ^[0-9]*_
            if [ $? -eq 0 ]; then
                echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings "export $(echo ${key#*_} | awk '{print toupper($0)}')=${!name}"
            else
                echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings "export $(echo ${key} | awk '{print toupper($0)}')=${!name}"
            fi
        else
            echo ${key} | grep -q ^[0-9]*_
            if [ $? -eq 0 ]; then
                echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings "export $(echo ${key#*_} | awk '{print toupper($0)}')='${!name}'"
            else
                echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings "export $(echo ${key} | awk '{print toupper($0)}')='${!name}'"
            fi
        fi
    fi
done < <(env | grep "CASSET" | sort)
set -e

echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings ""
echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings "# LD_LIBRARY_PATH being pulled from passed in variables"

# Process ld.library.path option settings
while IFS='=' read -r name value ; do
    key=$(cut -d'_' -f2- <<<"${name}")
    if [[ ${name} == 'CASLLP_'* ]]; then
        if [[ ${!name} == *'$LD_LIBRARY_PATH'* ]]; then
            # If the value passed in already is adding the LD_LIBRARY_PATH, then do not add it
            echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings "export LD_LIBRARY_PATH=${!name}"
        else
            # If the value passed in does not have the LD_LIBRARY_PATH as part of the value, then add it
            echo >> ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas_docker.settings "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:${!name}"
        fi
    fi
done < <(env | grep "CASLLP" | sort)

# Update the casconfig.lua file to process the Docker lua post what was done
# setting up the image but before processing any settings in the usermods file

sed -i "/-- Process a user specific file if available/i pass,err = pcall(dofile, config_loc .. 'casconfig_docker.lua')" ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/casconfig.lua
sed -i "/-- Process a user specific file if available/i \ " ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/casconfig.lua

# Update the cas.settings file to process the Docker settings post what was done
# setting up the image but before processing any settings in the usermods file

sed -i '/cas_usermods.settings/i [ -f \$DIR/cas_docker.settings ]   && source \$DIR/cas_docker.settings' ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/cas.settings
sed -i '/\\$DIR\/cas_usermods.settings/i [ -f \\$DIR/cas_docker.settings ]   && source \\$DIR/cas_docker.settings' ${SASHOME}/bin/cas_setup.sh

# Update the sas-cas sysconfig file to process the Docker settings post what was done
# setting up the image but before processing any settings in the usermods file

sed -i '/sas-${SASDEPLOYID}-cas-${SASINSTID}-deployment/a \    [ -f ${_sysconf_dir}/sas/sas-${SASDEPLOYID}-cas-${SASINSTID}-docker ]     && source ${_sysconf_dir}/sas/sas-${SASDEPLOYID}-cas-${SASINSTID}-docker' ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas
sed -i '/sas-cas-deployment/a \    [ -f ${_conf_dir_name}/sas-cas-docker ] && source ${_conf_dir_name}/sas-cas-docker' ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas

# echo some stuff back to the user for helpfulness

if [[ -n ${CASENV_CASDATADIR} ]]; then
    echo "[INFO] : CASENV_CASDATADIR is '${CASENV_CASDATADIR}'"
fi

echo "[INFO] : CASENV_CAS_VIRTUAL_HOST is '${CASENV_CAS_VIRTUAL_HOST}'"
echo "[INFO] : CASENV_CAS_VIRTUAL_PORT is '${CASENV_CAS_VIRTUAL_PORT}'"

if [[ -n ${CASENV_ADMIN_USER} ]]; then
    echo "[INFO] : CASENV_ADMIN_USER is '${CASENV_ADMIN_USER}'"
else
    export CASENV_ADMIN_USER=sas
    echo "[INFO] : CASENV_ADMIN_USER is 'sas'"
fi

# DOCKER-390: Make sure the location of the data directory is used for the referenceData path
sed -i 's|casData = getDataPath()|casData = os.getenv("CASDATADIR")|' ${SASHOME}/share/cas/10caslibrefdat_startup.lua

# When set to zero, will make sure that the system will not get the servicesbaseurl from Consul
[[ -z ${CHECK_HTTP+x} ]] && export CHECK_HTTP=1
echo "CHECK_HTTP=${CHECK_HTTP}" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker

# Make sure node.lua is pointing to the correct spot
sed -i "s/config_loc \.\./current_dir \.\./g" ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/node.lua
sed -i "s/^config_loc/-- config_loc/g" ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/node.lua

# Remove startup.lua files
rm -f ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/start.d/05updateperms_startup.lua

# Disable waiting on the worker nodes. Cloud deployments are elastic in nature
# and will not use this feature
echo "export CAS_CONSUL_WAIT_DISABLED=true" >> ${SAS_CAS_CONFIG}/etc/sysconfig/cas/${SASCASINSTANCE}/sas-cas-docker

# Believe this is only needed if we are not in a full stack deployment.
# Using the consul token to define if we are in a full stack or not.
if [ -z ${CONSUL_TOKENS_CLIENT} ]; then
    # DOCKER-392: Using a specific docker perms file that will create the public caslib
    cat > ${SAS_CAS_CONFIG}/etc/cas/${SASCASINSTANCE}/perms.xml << PERMSXML
<?xml version="1.0" encoding="utf-8"?>

<!-- Customer permissions file/template -->

<AccessControls version="1.0" readonly="TRUE">

   <!-- CAS server initial launch identity -->
   <Administrator name="\${ADMIN_USER}-User-SuperUser" user="\${ADMIN_USER}" type="SuperUser"/>

   <!-- Manage Global Caslibs -->
   <CASLib name='_GLOBAL'
           desc='Permission for global caslib creation'
           uuid='3a177916-96bf-2587-3170-9a735123413a'>

      <!-- Global caslib creation is open to administrators -->
      <Grant user='\${ADMIN_USER}' perm='ManageAccess'/>

   </CASLib>

   <!-- Manage Session Caslibs -->
   <CASLib name='_SESSION'
           desc='Permission for session caslib creation'
           uuid='4b166916-169f-3557-2150-b8865123731b'>

      <!-- Allow all users to create session caslibs -->
      <Grant group='*' perm='ManageAccess'/>

   </CASLib>

   <CASLib name='Public'
           desc='Shared and writeable caslib, accessible to all users.'
           path='\${CASDATADIR}/public'
           uuid='26ea7916-86af-4547-9180-9876512345cc'
           subdirs='FALSE' type='PATH'>

      <Grant user='\${ADMIN_USER}' perm='ManageAccess'/>
      <Grant user='\${ADMIN_USER}' perm='AlterCaslib'/>

      <Deny  group='*' perm='ManageAccess'/>
      <Deny  group='*' perm='AlterCaslib'/>

      <Grant group='*' perm='ReadInfo'/>
      <Grant group='*' perm='Select'/>
      <Grant group='*' perm='LimitedPromote'/>
      <Grant group='*' perm='Promote'/>
      <Grant group='*' perm='CreateTable'/>
      <Grant group='*' perm='DropTable'/>
      <Grant group='*' perm='DeleteSource'/>
      <Grant group='*' perm='Insert'/>
      <Grant group='*' perm='Update'/>
      <Grant group='*' perm='Delete'/>
      <Grant group='*' perm='AlterTable'/>

   </CASLib>

   <!-- Manage Registered Action Sets -->
   <ActionSet name='_REGISTERED'>

      <!-- Grant access to create Action Set metadata -->

   </ActionSet>

   <!-- Manage Unregistered Action Sets -->
   <ActionSet name='_UNREGISTERED'>

      <!-- Nobody is allowed to use unregistered Action Sets by default -->
      <Deny group='*' perm='ManageAccess'/>
      <Deny group='*' perm='Load'/>

   </ActionSet>

   <ActionSet name='builtins' flags='system'>

      <!-- Grant all users access to all actions -->
      <Grant group='*' perm='ReadInfo'/>
      <Grant group='*' perm='Execute'/>
      <Grant group='*' perm='Load'/>

      <!-- Direct access controls required on shutdown -->
      <Action name='shutdown'         flags='direct'>
         <Grant group='*'             perm='ReadInfo'/>
      </Action>

      <!-- Direct access controls required on addNode -->
      <Action name='addNode'          flags='direct'>
         <Grant group='*'             perm='ReadInfo'/>
      </Action>

      <!-- Direct access controls required on removeNode -->
      <Action name='removeNode'       flags='direct'>
         <Grant group='*'             perm='ReadInfo'/>
      </Action>

      <!-- Direct access controls required on installActionSet -->
      <Action name='installActionSet' flags='direct'>
         <Grant group='*'             perm='ReadInfo'/>
      </Action>

      <!-- System actions -->
      <Action name='help' flags='system'/>
      <Action name='queryActionSet' flags='system'/>
      <Action name='queryName' flags='system'/>
      <Action name='reflect' flags='system'/>
      <Action name='casCommon' flags='system'/>

   </ActionSet>

   <ActionSet name='configuration' flags='system'>

      <!-- Grant all users read access to all actions -->
      <Grant group='*' perm='ReadInfo'/>
      <Grant group='*' perm='Load'/>

      <!-- Direct access controls required on setServOpt -->
      <Action name='setServOpt' flags='direct'>
         <Grant group='*'       perm='ReadInfo'/>
      </Action>

      <!-- Direct access controls required on getServOpt -->
      <Action name='getServOpt' flags='direct'>
         <Grant group='*'       perm='ReadInfo'/>
      </Action>

      <!-- Direct access controls required on listServOpts -->
      <Action name='listServOpts' flags='direct'>
         <Grant group='*'         perm='ReadInfo'/>
      </Action>

   </ActionSet>

   <ActionSet name='accessControl' flags='system'>
      <Grant group='*' perm='ReadInfo'/>
      <Grant group='*' perm='Execute'/>
      <Grant group='*' perm='Load'/>
   </ActionSet>

   <ActionSet name='table' flags='system'>
      <Grant group='*' perm='ReadInfo'/>
      <Grant group='*' perm='Execute'/>
      <Grant group='*' perm='Load'/>
      <Action name='queryCasLib' flags='system'/>
   </ActionSet>

   <ActionSet name='session' flags='system'>
      <Grant group='*' perm='ReadInfo'/>
      <Grant group='*' perm='Execute'/>
      <Grant group='*' perm='Load'/>
   </ActionSet>

   <ActionSet name='sessionProp' flags='system'>
      <Grant group='*' perm='ReadInfo'/>
      <Grant group='*' perm='Execute'/>
      <Grant group='*' perm='Load'/>
   </ActionSet>

</AccessControls>
PERMSXML
fi

###############################################################################
# Post Deploy
###############################################################################

#
# Run any post deploy scripts
#
if [ ! -z "${POST_DEPLOY_SCRIPT}" ]; then
    echo "Creating post deploy script"
    echo "${POST_DEPLOY_SCRIPT}" > /tmp/post_deploy.sh
    chmod --verbose a+x /tmp/post_deploy.sh
    echo
fi
n_post_deploy_count=$(find /tmp -type f -name "*post_deploy.sh" | wc -c)
if (( ${n_post_deploy_count} > 0 )); then
    for str_post_script in $(ls -1 /tmp/*post_deploy.sh); do
        echo "Running post deploy script \"${str_post_script}\""
        ${str_post_script}
    done
fi

###############################################################################
# Run CAS
###############################################################################

echo "Starting Cloud Analytic Services..."
mkdir -pv -m 2770 /var/log/sas/viya/cas/default_audit
chown sas:sas /var/log/sas/viya/cas/default_audit

docker_run_sas_services

#
# Output the file locations to make it a little easier to look at logs
#
# Pause to allow the processes to start and create log files
# sleep 10
# set +e
# env | grep -q KUBERNETES
# k8s_check=$?
# set -e
# for item in $(tree -fi --prune /opt/sas/viya/config/var/log/); do
#     if ((${k8s_check} == 0)); then
#         if [ -f ${item} ]; then echo kubectl exec -it ${HOSTNAME} -- tail -f ${item}; fi
#     elif [ -f /.dockerenv ]; then
#         if [ -f ${item} ]; then echo docker exec -it $(hostname) tail -f ${item}; fi
#     fi
# done

###############################################################################
# Keep the container alive until it is killed
###############################################################################

docker_check_sas_services

exit 0
